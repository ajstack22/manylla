import React from "react";
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  Modal,
  StyleSheet,
  Alert,
  Dimensions,
  Share,
} from "react-native";
import { useTheme } from "../../context/ThemeContext";

export const PrintPreview = ({
  visible,
  onClose,
  childName,
  selectedCategories,
  entries,
  includeQuickInfo,
  recipientName,
  note,
}) => {
  const { colors } = useTheme();
  const styles = getStyles(colors);
  const categoryTitles = {
    goals: "Current Goals",
    successes: "Recent Successes",
    strengths: "Strengths",
    challenges: "Challenges",
  };

  const generateHTML = () => {
    const currentDate = new Date().toLocaleDateString();
    const currentDateTime = new Date().toLocaleString();

    let html = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>${childName} - Information Summary</title>
        <style>
          body { 
            font-family: Arial, sans-serif; 
            margin: 20px; 
            line-height: 1.6;
            color: #333;
          }
          .header { 
            text-align: center; 
            margin-bottom: 30px; 
          }
          .title { 
            font-size: 24px; 
            font-weight: bold; 
            margin-bottom: 10px; 
          }
          .subtitle { 
            font-size: 14px; 
            color: #666; 
          }
          .divider { 
            border-top: 1px solid #ccc; 
            margin: 20px 0; 
          }
          .note { 
            background-color: #f5f5f5; 
            padding: 15px; 
            border-radius: 8px; 
            margin-bottom: 20px;
            font-style: italic;
          }
          .section { 
            margin-bottom: 30px; 
            page-break-inside: avoid; 
          }
          .section-title { 
            font-size: 18px; 
            font-weight: bold; 
            margin-bottom: 15px; 
          }
          .entry { 
            margin-bottom: 15px; 
            margin-left: 20px;
          }
          .entry-title { 
            font-weight: bold; 
            margin-bottom: 5px; 
          }
          .entry-description { 
            margin-left: 15px;
          }
          .quick-info-item {
            margin-bottom: 10px;
            margin-left: 20px;
          }
          .footer { 
            margin-top: 40px; 
            padding-top: 20px; 
            border-top: 1px solid #ccc; 
            text-align: center; 
            font-size: 12px; 
            color: #666;
          }
        </style>
      </head>
      <body>
        <div class="header">
          <div class="title">${childName} - Information Summary</div>
          <div class="subtitle">
            Prepared on ${currentDate}${recipientName ? ` for ${recipientName}` : ""}
          </div>
        </div>
        
        <div class="divider"></div>
    `;

    // Add note if present
    if (note) {
      html += `
        <div class="note">
          ${note}
        </div>
      `;
    }

    // Add quick info if included
    if (includeQuickInfo) {
      html += `
        <div class="section">
          <div class="section-title">Quick Reference</div>
          <div class="quick-info-item"><strong>Communication:</strong> Uses 2-3 word phrases. Understands more than she can express.</div>
          <div class="quick-info-item"><strong>Sensory:</strong> Sensitive to loud noises and bright lights. Loves soft textures.</div>
          <div class="quick-info-item"><strong>Medical:</strong> No allergies. Takes melatonin for sleep (prescribed).</div>
          <div class="quick-info-item"><strong>Dietary:</strong> Gluten-free diet. Prefers crunchy foods. No nuts.</div>
          <div class="quick-info-item"><strong>Emergency Contact:</strong> Mom: 555-0123, Dad: 555-0124</div>
        </div>
      `;
    }

    // Add selected categories
    selectedCategories.forEach((category) => {
      const categoryEntries = entries[category];
      if (categoryEntries && categoryEntries.length > 0) {
        html += `
          <div class="section">
            <div class="section-title">${categoryTitles[category]}</div>
        `;

        categoryEntries.forEach((entry) => {
          html += `
            <div class="entry">
              <div class="entry-title">‚Ä¢ ${entry.title}</div>
              <div class="entry-description">${entry.description}</div>
            </div>
          `;
        });

        html += `</div>`;
      }
    });

    // Add footer
    html += `
        <div class="footer">
          This information is confidential. Generated by Manylla on ${currentDateTime}
        </div>
      </body>
      </html>
    `;

    return html;
  };

  const handlePrint = async () => {
    try {
      // Generate a text version of the document
      const textContent = generateTextContent();

      // Share the content as text
      await Share.share({
        message: textContent,
        title: `${childName} - Information Summary`,
      });
    } catch (error) {
      if (error.message !== "User did not share") {
        Alert.alert("Error", "Failed to share document. Please try again.");
      }
    }
  };

  const handleDownloadPDF = async () => {
    // Same as print for now - shares the text content
    await handlePrint();
  };

  const generateTextContent = () => {
    let content = `${childName} - Information Summary
`;
    content += `Prepared on ${new Date().toLocaleDateString()}
`;
    if (recipientName) {
      content += `For: ${recipientName}
`;
    }
    content += "
---

";

    if (note) {
      content += `Note: ${note}

`;
    }

    selectedCategories.forEach((category) => {
      const categoryEntries = entries[category] || [];
      if (categoryEntries.length > 0) {
        content += `${category.toUpperCase()}
`;
        content += "=".repeat(category.length) + "

";

        categoryEntries.forEach((entry, index) => {
          content += `${index + 1}. ${entry.title}
`;
          content += `   ${entry.description}
`;
          content += `   Date: ${new Date(entry.date).toLocaleDateString()}

`;
        });
      }
    });

    return content;
  };

  return (
    <Modal visible={visible} animationType="slide" onRequestClose={onClose}>
      <View style={styles.container}>
        {/* Header */}
        <View style={styles.header}>
          <View style={styles.headerLeft}>
            <Text style={styles.headerIcon}>üñ®Ô∏è</Text>
            <Text style={styles.headerTitle}>Print Preview</Text>
          </View>
          <TouchableOpacity onPress={onClose} style={styles.closeButton}>
            <Text style={styles.closeButtonIcon}>‚úï</Text>
          </TouchableOpacity>
        </View>

        {/* Preview Content */}
        <ScrollView style={styles.previewContainer}>
          <View style={styles.previewContent}>
            {/* Header */}
            <View style={styles.documentHeader}>
              <Text style={styles.documentTitle}>
                {childName} - Information Summary
              </Text>
              <Text style={styles.documentSubtitle}>
                Prepared on {new Date().toLocaleDateString()}
                {recipientName ? ` for ${recipientName}` : ""}
              </Text>
            </View>

            <View style={styles.divider} />

            {/* Note */}
            {note && (
              <View style={styles.noteSection}>
                <Text style={styles.noteText}>{note}</Text>
              </View>
            )}

            {/* Quick Info */}
            {includeQuickInfo && (
              <View style={styles.section}>
                <Text style={styles.sectionTitle}>Quick Reference</Text>
                <View style={styles.quickInfoItems}>
                  <Text style={styles.quickInfoItem}>
                    <Text style={styles.bold}>Communication:</Text> Uses 2-3
                    word phrases. Understands more than she can express.
                  </Text>
                  <Text style={styles.quickInfoItem}>
                    <Text style={styles.bold}>Sensory:</Text> Sensitive to loud
                    noises and bright lights. Loves soft textures.
                  </Text>
                  <Text style={styles.quickInfoItem}>
                    <Text style={styles.bold}>Medical:</Text> No allergies.
                    Takes melatonin for sleep (prescribed).
                  </Text>
                  <Text style={styles.quickInfoItem}>
                    <Text style={styles.bold}>Dietary:</Text> Gluten-free diet.
                    Prefers crunchy foods. No nuts.
                  </Text>
                  <Text style={styles.quickInfoItem}>
                    <Text style={styles.bold}>Emergency Contact:</Text> Mom:
                    555-0123, Dad: 555-0124
                  </Text>
                </View>
              </View>
            )}

            {/* Selected Categories */}
            {selectedCategories.map((category) => {
              const categoryEntries = entries[category];
              if (!categoryEntries || categoryEntries.length === 0) return null;

              return (
                <View key={category} style={styles.section}>
                  <Text style={styles.sectionTitle}>
                    {categoryTitles[category]}
                  </Text>
                  <View style={styles.entriesContainer}>
                    {categoryEntries.map((entry, index) => (
                      <View key={index} style={styles.entry}>
                        <Text style={styles.entryTitle}>‚Ä¢ {entry.title}</Text>
                        <Text style={styles.entryDescription}>
                          {entry.description}
                        </Text>
                      </View>
                    ))}
                  </View>
                </View>
              );
            })}

            {/* Footer */}
            <View style={styles.documentFooter}>
              <Text style={styles.footerText}>
                This information is confidential. Generated by Manylla on{" "}
                {new Date().toLocaleString()}
              </Text>
            </View>
          </View>
        </ScrollView>

        {/* Action Buttons */}
        <View style={styles.actions}>
          <TouchableOpacity
            style={[styles.button, styles.cancelButton]}
            onPress={onClose}
          >
            <Text style={styles.cancelButtonText}>Close</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.downloadButton]}
            onPress={handleDownloadPDF}
          >
            <Text style={styles.downloadIcon}>üìÑ</Text>
            <Text style={styles.downloadButtonText}>Share as Text</Text>
          </TouchableOpacity>

          <TouchableOpacity
            style={[styles.button, styles.printButton]}
            onPress={handlePrint}
          >
            <Text style={styles.printIcon}>üñ®Ô∏è</Text>
            <Text style={styles.printButtonText}>Print</Text>
          </TouchableOpacity>
        </View>
      </View>
    </Modal>
  );
};

const { width } = Dimensions.get("window");

const getStyles = (colors) =>
  StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: colors.background.default,
    },
    header: {
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "space-between",
      paddingHorizontal: 0,
      paddingVertical: 6,
      borderBottomWidth: 1,
      borderBottomColor: colors.border,
      backgroundColor: colors.background.paper,
    },
    headerLeft: {
      flexDirection: "row",
      alignItems: "center",
      gap: 20,
    },
    headerTitle: {
      fontSize: 18,
      fontWeight: "600",
      color: colors.text.primary,
    },
    closeButton: {
      padding: 8,
    },
    closeButtonIcon: {
      fontSize: 24,
      color: colors.text.primary,
    },
    headerIcon: {
      fontSize: 24,
      color: colors.primary,
      marginRight: 8,
    },
    downloadIcon: {
      fontSize: 16,
      color: colors.primary,
      marginRight: 5,
    },
    printIcon: {
      fontSize: 18,
      color: colors.background.paper,
      marginRight: 5,
    },
    previewContainer: {
      flex: 1,
      backgroundColor: colors.background.default,
    },
    previewContent: {
      backgroundColor: colors.background.paper,
      margin: 60,
      padding: 40,
      borderRadius: 8,
      elevation: 2,
      shadowColor: "#000",
      shadowOffset: { width: 0, height: 2 },
      shadowOpacity: 0.1,
      shadowRadius: 4,
    },
    documentHeader: {
      alignItems: "center",
      marginBottom: 4,
    },
    documentTitle: {
      fontSize: 20,
      fontWeight: "bold",
      color: colors.text.primary,
      textAlign: "center",
      marginBottom: 8,
    },
    documentSubtitle: {
      fontSize: 14,
      color: colors.text.secondary,
      textAlign: "center",
    },
    divider: {
      height: 2,
      backgroundColor: colors.border,
      marginVertical: 6,
    },
    noteSection: {
      backgroundColor: colors.background.default,
      padding: 60,
      borderRadius: 8,
      marginBottom: 0,
    },
    noteText: {
      fontSize: 14,
      color: colors.text.primary,
      fontStyle: "italic",
      lineHeight: 20,
    },
    section: {
      marginBottom: 4,
    },
    sectionTitle: {
      fontSize: 16,
      fontWeight: "600",
      color: colors.text.primary,
      marginBottom: 2,
    },
    quickInfoItems: {
      marginLeft: 6,
    },
    quickInfoItem: {
      fontSize: 14,
      color: colors.text.primary,
      lineHeight: 20,
      marginBottom: 8,
    },
    bold: {
      fontWeight: "bold",
    },
    entriesContainer: {
      marginLeft: 6,
    },
    entry: {
      marginBottom: 2,
    },
    entryTitle: {
      fontSize: 14,
      fontWeight: "500",
      color: colors.text.primary,
      marginBottom: 8,
    },
    entryDescription: {
      fontSize: 14,
      color: colors.text.primary,
      lineHeight: 20,
      marginLeft: 2,
    },
    documentFooter: {
      marginTop: 2,
      paddingTop: 6,
      borderTopWidth: 1,
      borderTopColor: colors.border,
      alignItems: "center",
    },
    footerText: {
      fontSize: 12,
      color: colors.text.secondary,
      textAlign: "center",
    },
    actions: {
      flexDirection: "row",
      paddingHorizontal: 0,
      paddingVertical: 6,
      borderTopWidth: 1,
      borderTopColor: colors.border,
      backgroundColor: colors.background.paper,
      gap: 20,
    },
    button: {
      flex: 1,
      flexDirection: "row",
      alignItems: "center",
      justifyContent: "center",
      paddingVertical: 4,
      borderRadius: 8,
      gap: 8,
    },
    cancelButton: {
      backgroundColor: colors.background.paper,
      borderWidth: 1,
      borderColor: colors.border,
    },
    cancelButtonText: {
      fontSize: 16,
      color: colors.text.primary,
      fontWeight: "500",
    },
    downloadButton: {
      backgroundColor: colors.background.paper,
      borderWidth: 1,
      borderColor: colors.primary,
    },
    downloadButtonText: {
      fontSize: 16,
      color: colors.primary,
      fontWeight: "600",
    },
    printButton: {
      backgroundColor: colors.primary,
    },
    printButtonText: {
      fontSize: 16,
      color: colors.background.paper,
      fontWeight: "600",
    },
  });
